@using MS.Katusha.Enumerations
@model MS.Katusha.Web.Models.Entities.ProfileModel

@* This partial view defines form fields that will appear when creating and editing entities *@

<div class="editor-label">
    @Html.LabelFor(model => model.Name)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.Name)
    @Html.ValidationMessageFor(model => model.Name)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.FriendlyName)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.FriendlyName)
    @Html.ValidationMessageFor(model => model.FriendlyName)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.City)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.City)
    @Html.ValidationMessageFor(model => model.City)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Height)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.Height)
    @Html.ValidationMessageFor(model => model.Height)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.BirthYear)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.BirthYear)
    @Html.ValidationMessageFor(model => model.BirthYear)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.HairColor)
</div>
<div class="editor-field">
    @Html.EnumDropDownListFor(model => model.HairColor)
    @Html.ValidationMessageFor(model => model.HairColor)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Religion)
</div>
<div class="editor-field">
    @Html.EnumDropDownListFor(model => model.Religion)
    @Html.ValidationMessageFor(model => model.Religion)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Smokes)
</div>
<div class="editor-field">
    @Html.EnumDropDownListFor(model => model.Smokes)
    @Html.ValidationMessageFor(model => model.Smokes)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.From)
</div>
<div class="editor-field">
    @Html.EnumDropDownListFor(model => model.From)
    @Html.ValidationMessageFor(model => model.From)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.EyeColor)
</div>
<div class="editor-field">
    @Html.EnumDropDownListFor(model => model.EyeColor)
    @Html.ValidationMessageFor(model => model.EyeColor)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.BodyBuild)
</div>
<div class="editor-field">
    @Html.EnumDropDownListFor(model => model.BodyBuild)
    @Html.ValidationMessageFor(model => model.BodyBuild)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Alcohol)
</div>
<div class="editor-field">
    @Html.EnumDropDownListFor(model => model.Alcohol)
    @Html.ValidationMessageFor(model => model.Alcohol)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Description)
</div>
<div class="editor-field">
    @Html.TextAreaFor(model => model.Description)
    @Html.ValidationMessageFor(model => model.Description)
</div>
@if(Model is BoyModel) {
    @Html.Partial("_BoyCreateOrEdit", Model as BoyModel)
} else if (Model is GirlModel) {
    @Html.Partial("_GirlCreateOrEdit", Model as GirlModel)
} else {
    @Html.Label("OH NO!")
}
<div class="editor-label">
    @Html.LabelFor(model => model.CountriesToVisit)
</div>
<div class="editor-field">
    <select id="CountriesToVisitSelection" name="CountriesToVisitSelection[]"> </select>
    @Html.ValidationMessageFor(model => model.CountriesToVisit)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.LanguagesSpoken)
</div>
<div class="editor-field">
    <select id="LanguagesSpokenSelection" name="LanguagesSpokenSelection[]"> </select>
    @Html.ValidationMessageFor(model => model.LanguagesSpoken)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Searches)
</div>
<div class="editor-field">
    <select id="SearchingForSelection" name="SearchingForSelection[]"> </select>
    @Html.ValidationMessageFor(model => model.Searches)
</div>


<script type="text/javascript">
    $(document).ready(function () {
        var countries =@Html.ToJson(typeof(Country));
        var countriesVisited =@Html.ToJson(Model.CountriesToVisit, p=>p.Country);
        $("#CountriesToVisitSelection").fcbkcomplete({
            json_url: countries,
            cache: true,
            json_cache: true,
            filter_case: false,
            filter_hide: false,
            firstselected: false,
            filter_selected: true,
            maxitems: 3,
            delay: 1,
            complete_text: "Enter Countries..."
        });
        for (var i = 0; i < countriesVisited.length; i++) {  
            $("#CountriesToVisitSelection").trigger("addItem", countriesVisited[i]);  
        }

        var languages =@Html.ToJson(typeof(Language));
        var languagesSpoken =@Html.ToJson(Model.LanguagesSpoken, p=>p.Language);
        $("#LanguagesSpokenSelection").fcbkcomplete({
            json_url: languages,
            cache: true,
            json_cache: true,
            filter_case: false,
            filter_hide: false,
            firstselected: false,
            filter_selected: true,
            delay: 1,
            complete_text: "Enter Languages..."
        });
        for (var i = 0; i < languagesSpoken.length; i++) {  
            $("#LanguagesSpokenSelection").trigger("addItem", languagesSpoken[i]);  
        }
        
        var searches =@Html.ToJson(typeof(LookingFor));
        var imsearchingfor =@Html.ToJson(Model.Searches, p=>p.Search);
        $("#SearchingForSelection").fcbkcomplete({
            json_url: searches,
            cache: true,
            json_cache: true,
            filter_case: false,
            filter_hide: false,
            firstselected: false,
            filter_selected: true,
            delay: 1,
            complete_text: "Enter what you are searching for..."
        });
        for (var i = 0; i < imsearchingfor.length; i++) {  
            $("#SearchingForSelection").trigger("addItem", imsearchingfor[i]);  
        }
    });

</script>